# nginx + unicorn application vhost
#
# Generated by Capistrano for <%= application %>
# Local modifications will be overwritten.

upstream <%= application %> {
  server 127.0.0.1:<%= unicorn[:port] %> fail_timeout=0;
}

<% if nginx_cfg[:redirect_names] %>
server {
  server_name <%= nginx_cfg[:redirect_names] %>;
  rewrite ^(.*) http://<%= instance %>$1 permanent;
}
<% end %>

<% (nginx_cfg[:servers] || [nginx_cfg]).each do |server| %>
server {
  listen <%= server[:port] %><%= server[:ssl] ? ' ssl' : '' %>;

  log_subrequest on;

  server_name <%= instance %> <%= server[:more_server_names] || nginx_cfg[:more_server_names] %>;

  <% if server[:ht_user] && server[:ht_passwd] %>
  auth_basic            "Restricted";
  auth_basic_user_file  <%= shared_path %>/system/passfile;
   <% end %>

  <% if server[:redirect_to_protocol] %>
  rewrite ^(.*) <%= server[:redirect_to_protocol]%>://$host$1 permanent;
  <% else %>
  client_max_body_size 4G;

  keepalive_timeout 5;

  root <%= current_path %>/public;

  error_page 503 @503;

  location @503 {
    root <%= shared_path %>/system;
    rewrite ^(.*)$ /maintenance.html break;
  }

  # Support cap deploy:web:disable
  if (-f <%= shared_path %>/system/maintenance.html) {
    return 503;
  }

  try_files $uri $uri/index.html $uri.html @main;

  <% ((nginx_cfg[:ht_off] || []) | ["@main"]).each do |location| %>
  location <%=location %> {
    <% if nginx_cfg[:ht_off] && nginx_cfg[:ht_off].include?(location) %>
    auth_basic off;
    <% end %>
    proxy_pass http://<%= application %>;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    <% if server[:ssl] %>
    proxy_set_header X_FORWARDED_PROTO https;
    <% end %>
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_intercept_errors on;
    break;
  }
  <% end %>
  <% end %>
}
<% end %>
